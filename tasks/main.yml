---
- name: Verify that python3-pip and libguestfs-tools are installed on the Proxmox node
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  delegate_to: "{{ proxmox_api_host }}"
  loop:
    - python3-pip
    - libguestfs-tools

- name: Verify if proxmoxer pip module is installed on the Proxmox node
  ansible.builtin.pip:
    name: proxmoxer
    state: present
  delegate_to: "{{ proxmox_api_host }}"

- name: Download cloud image file
  ansible.builtin.get_url:
    url: "{{ virtual_machine_disk_url }}"
    dest: "/tmp/{{ virtual_machine_disk_file }}"
    mode: "0664"
  delegate_to: "{{ proxmox_api_host }}"

- name: "{{ ('Customize cloud image file for virtual machine \"' + virtual_machine_name + '\"') }}"
  ansible.builtin.copy:
    src: "/tmp/{{ virtual_machine_disk_file }}"
    dest: "/tmp/{{ virtual_machine_name }}_{{ virtual_machine_disk_file }}"
    owner: root
    group: root
    mode: "0644"
    remote_src: true
  delegate_to: "{{ proxmox_api_host }}"

- name: Add QEMU Guest Agent to image file
  ansible.builtin.command:
    cmd: >
      virt-customize -a /tmp/{{ virtual_machine_name }}_{{ virtual_machine_disk_file }}
      --install qemu-guest-agent --firstboot-command='systemctl start qemu-guest-agent'
  delegate_to: "{{ proxmox_api_host }}"
  changed_when: false

- name: "{{ ('Grab ID of existing virtual machine \"' + virtual_machine_name + '\"') }}"
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_api_host }}"
    api_password: "{{ proxmox_api_password }}"
    api_user: "{{ proxmox_api_user }}"
    name: "{{ virtual_machine_name }}"
    node: "{{ proxmox_api_host }}"
    state: current
  changed_when: false
  failed_when: false
  register: vme
  delegate_to: "{{ proxmox_api_host }}"

- name: "{{ ('Stop existing virtual machine named \"' + virtual_machine_name + '\"') }}"
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_api_host }}"
    api_password: "{{ proxmox_api_password }}"
    api_user: "{{ proxmox_api_user }}"
    node: "{{ proxmox_api_host }}"
    state: stopped
    vmid: "{{ vme.vmid }}"
  when:
    - vme.msg is defined and vme.msg != ("VM with name = " + virtual_machine_name + " does not exist in cluster")
    - vme.vmid > 0
    - vme.status == "running"
  delegate_to: "{{ proxmox_api_host }}"

- name: "{{ ('Remove existing virtual machine named \"' + virtual_machine_name + '\"') }}"
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_api_host }}"
    api_password: "{{ proxmox_api_password }}"
    api_user: "{{ proxmox_api_user }}"
    node: "{{ proxmox_api_host }}"
    state: absent
    vmid: "{{ vme.vmid }}"
  when:
    - vme.msg is defined and vme.msg != ("VM with name = " + virtual_machine_name + " does not exist in cluster")
    - vme.vmid > 0
  delegate_to: "{{ proxmox_api_host }}"

- name: "{{ ('Create virtual machine named \"' + virtual_machine_name + '\"') }}"
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_api_host }}"
    api_password: "{{ proxmox_api_password }}"
    api_user: "{{ proxmox_api_user }}"
    agent: "enabled=1"
    bios: "{{ proxmox_bios }}"
    cores: "{{ virtual_machine_cores }}"
    cpu: "cputype=kvm64"
    description: |-
      # This VM is managed by Ansible

      Do not make changes here - they may/will be overwritten.

      Created: {{ lookup('pipe', 'date --utc --iso-8601=seconds') }}Z
    efidisk0: "{{ omit if proxmox_bios != 'ovmf' else efidisk }}"
    kvm: true
    localtime: false
    memory: "{{ virtual_machine_memory }}"
    name: "{{ virtual_machine_name }}"
    net:
      net0: "virtio,bridge=vmbr{{ vars[proxmox_network_lan].vmbr }},tag={{ vars[proxmox_network_lan].tag }}"
      net1: >-
        'virtio,bridge=vmbr' + vars[proxmox_network_san].vmbr | string if virtual_machine_san | length > 0 else omit }}
    node: "{{ proxmox_api_host }}"
    onboot: "{{ virtual_machine_start }}"
    ostype: "{{ virtual_machine_os }}"
    scsi:
      scsi0: "{{ proxmox_volume_group }}:0,import-from=/tmp/{{ virtual_machine_name }}_{{ virtual_machine_disk_file }}"
    scsihw: "virtio-scsi-pci"
    serial:
      serial0: socket
    state: present
    vga: serial0
    vmid: "{{ omit if virtual_machine_id == 'auto' else virtual_machine_id }}"
  register: vm
  failed_when:
    - vm.msg != ("VM " + virtual_machine_name + " with vmid " + vm.vmid | string + " deployed")
  delegate_to: "{{ proxmox_api_host }}"

- name: "{{ 'Increase disk size for virtual machine with ID \"' + vm.vmid | string + '\"' }}"
  community.general.proxmox_disk:
    api_host: "{{ proxmox_api_host }}"
    api_password: "{{ proxmox_api_password }}"
    api_user: "{{ proxmox_api_user }}"
    disk: "{{ virtual_machine_disk }}"
    size: "+{{ disk_expand_size }}G"
    state: resized
    vmid: "{{ vm.vmid }}"
  delegate_to: "{{ proxmox_api_host }}"

- name: "{{ 'Update cloud-init configuration for virtual machine with ID \"' + vm.vmid | string + '\"' }}"
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_api_host }}"
    api_password: "{{ proxmox_api_password }}"
    api_user: "{{ proxmox_api_user }}"
    cipassword: "{{ virtual_machine_password }}"
    ciuser: "{{ virtual_machine_user }}"
    ipconfig:
      ipconfig0: >-
        ip={{ 'dhcp' if virtual_machine_id == 'auto' else config_ip4
        + ('' if not vars[proxmox_network_lan].ip6 else config_ip6) }}
      ipconfig1: "{{ config_san if virtual_machine_san | length > 0 else omit }}"
    nameservers: "{{ virtual_machine_nameserver }}"
    node: "{{ proxmox_api_host }}"
    searchdomains: "{{ virtual_machine_searchdomain }}"
    sshkeys: "{{ omit if ssh_keys | length == 0 else ssh_keys }}"
    state: present
    update: true
    vmid: "{{ vm.vmid }}"
  register: vm_update
  failed_when:
    - vm_update.msg != ("VM None with vmid " + vm.vmid | string + " updated")
  delegate_to: "{{ proxmox_api_host }}"

- name: "{{ 'Generate cloud-init image for virtual machine with ID \"' + vm.vmid | string + '\"' }}"
  ansible.builtin.command:
    cmd: "qm set {{ vm.vmid }} --ide0 {{ proxmox_volume_group }}:cloudinit"
  delegate_to: "{{ proxmox_api_host }}"
  changed_when: false

- name: "{{ 'Update boot order for virtual machine with ID \"' + vm.vmid | string + '\"' }}"
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_api_host }}"
    api_password: "{{ proxmox_api_password }}"
    api_user: "{{ proxmox_api_user }}"
    boot: order=scsi0;ide0
    node: "{{ proxmox_api_host }}"
    update: true
    vmid: "{{ vm.vmid }}"
  register: vm_init
  failed_when:
    - vm_init.msg != ("VM None with vmid " + vm.vmid | string + " updated")
  delegate_to: "{{ proxmox_api_host }}"

- name: "{{ 'Start and initialize virtual machine with ID \"' + vm.vmid | string + '\"' }}"
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_api_host }}"
    api_password: "{{ proxmox_api_password }}"
    api_user: "{{ proxmox_api_user }}"
    node: "{{ proxmox_api_host }}"
    state: started
    vmid: "{{ vm.vmid }}"
  register: vm_init
  failed_when:
    - vm_init.msg != ("VM " + vm.vmid | string + " started")
  delegate_to: "{{ proxmox_api_host }}"

- name: Removed customized cloud image file
  ansible.builtin.file:
    path: "/tmp/{{ virtual_machine_name }}_{{ virtual_machine_disk_file }}"
    state: absent
  delegate_to: "{{ proxmox_api_host }}"
